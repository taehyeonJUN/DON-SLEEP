/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2020-10-19 02:12:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<title>회원가입</title>\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("/*\r\n");
      out.write("\tfunction fn_idChk() {\r\n");
      out.write("\t\t//아이디 중복체크\r\n");
      out.write("\t\tlet form = document.getElementById(\"form\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet xhr = new XMLHttpRequest();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\txhr.open(\"GET\",\"checkId?memberId=\"+form.memId.value,false);  \r\n");
      out.write("\t\t// false면 동기방식//checkId의 파라미터의 값을 일치\r\n");
      out.write("\t\t\r\n");
      out.write("\t\txhr.send(); \r\n");
      out.write("\t\t//get방식으로 checkId 컨트롤러(?)로 보냄.. form에 checkId인진 확실X\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet result = xhr.responseText; \r\n");
      out.write("\t\t\r\n");
      out.write("\t\talert(\"checkId :\" + result);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(result == \"TRUE\"){\r\n");
      out.write("\t\t\talert(\"이용 가능\");\t\r\n");
      out.write("\t\t\tform.checkId.value = form.memId.value; \r\n");
      out.write("\t\t}else(result == \"FALSE\"){\r\n");
      out.write("\t\t\talert(\"이용 불가능\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("*/\r\n");
      out.write("\t\r\n");
      out.write("\t//비동기\r\n");
      out.write("\tfunction fn_AsidChk() {\r\n");
      out.write("\t\tlet form = document.getElementById(\"form\");\r\n");
      out.write("\t\tlet xhr = new XMLHttpRequest();\r\n");
      out.write("\t\txhr.open(\"GET\", \"checkId?memberId=\"+form.memId.value,true);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\txhr.onreadystatechange = function(){\r\n");
      out.write("\t\t\tif(xhr.readyState == XMLHttpRequest.DONE){\r\n");
      out.write("\t\t\t\tif(xhr.status == 200){\r\n");
      out.write("\t\t\t\t\tlet result = xhr.responseText;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(result==\"TRUE\"){\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\talert(\"[비동기]사용가능 아디\");\r\n");
      out.write("\t\t\t\t\t\tform.checkId.value = form.memId.value;\r\n");
      out.write("\t\t\t\t\t}else\r\n");
      out.write("\t\t\t\t\t\talert(\"[비동기]사용할 수 없는 아디\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\txhr.send();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction submit(){\r\n");
      out.write("\t\tlet form = document.getElementById(\"form\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(form.checkId.value == \"false\"){\r\n");
      out.write("\t\t\talert(\"중복검사 해야합니다.\");\r\n");
      out.write("\t\t\treturn;  // 무의미한 return 작성\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(form.memId.value == \"\"){\r\n");
      out.write("\t\t\talert(\"아이디입력\");\r\n");
      out.write("\t\t\tform.memId.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tif(form.memName.value == \"\"){\r\n");
      out.write("\t\t\talert(\"이름입력\");\r\n");
      out.write("\t\t\tform.memName.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(form.memPass.value == \"\"){\r\n");
      out.write("\t\t\talert(\"비번입력\");\r\n");
      out.write("\t\t\tform.memPass.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(form.memTel.value == \"\"){\r\n");
      out.write("\t\t\talert(\"번호입력\");\r\n");
      out.write("\t\t\tform.memTel.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div>\r\n");
      out.write("\r\n");
      out.write("\t\t<form method=\"post\" id=\"form\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<input name=\"checkId\" type=\"hidden\" value=\"false\">\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<label>아이디:</label> \r\n");
      out.write("\t\t\t\t<input type=\"text\" placeholder=\"아이디\" name=\"memId\"> <a href=\"javascript:fn_AsidChk()\">중복검사</a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<label>이름:</label> \r\n");
      out.write("\t\t\t\t<input type=\"text\" placeholder=\"이름\" name=\"memName\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<label>비밀번호:</label> \r\n");
      out.write("\t\t\t\t<input type=\"password\" placeholder=\"비밀번호\" name=\"memPass\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<label>전화번호:</label> \r\n");
      out.write("\t\t\t\t<input type=\"tel\" placeholder=\"전화번호\" name=\"memTel\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("<!-- \t\t\t\t<input type=\"submit\" value=\"가입하기\"> -->\r\n");
      out.write("\t\t<button onclick=\"submit()\">가입</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
